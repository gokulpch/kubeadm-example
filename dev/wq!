- hosts: localhost
  vars:
    name_tag1: contrail-K8S-Master
    name_tag2: contrail-K8S-Minion
    region_tag: us-west-2
    availability_zone: us-west-2b
    cidr_block: 172.23.0.0/16
    subnet_cidr: 172.23.1.0/24
    ami: ami-efd0428f

  tasks:

  - name: Create a new VPC
    ec2_vpc:
      state: present
      cidr_block: "{{ cidr_block }}"
      resource_tags:
        Name: k8s-vpc
      region: "{{ region_tag }}"
      internet_gateway: True
      subnets:
        - cidr: "{{ subnet_cidr }}"
          az: "{{ availability_zone }}"
      route_tables:
        - subnets:
            - 172.23.1.0/24
          routes:
            - dest: 0.0.0.0/0
              gw: igw
    register: vpc

  - name: Create a new Subnet
    ec2_vpc_subnet:
      state: present
      vpc_id: "{{ vpc.vpc_id }}"
      cidr: "{{ subnet_cidr }}"
      region: "{{ region_tag }}"
      resource_tags:
        Name: k8s-subnet
    register: subnet

  - name: get my public IP
    ipify_facts:

  - name: Create a new security group
    ec2_group:
      name: K8s security group
      description: It allows ports 22, 80,8080 and 443 in and 80 and 443 out
      vpc_id: "{{vpc.vpc_id}}"
      region: "{{ region_tag }}"
      rules:
        - proto: tcp
          from_port: 0
          to_port: 65535
          cidr_ip: 0.0.0.0/0
        - proto: icmp
          from_port: -1
          to_port: -1
          cidr_ip: 0.0.0.0/0
        - proto: udp
          from_port: 0
          to_port: 65535
          cidr_ip: 0.0.0.0/0
        - proto: all
          group_name: K8s security group
      rules_egress:
        - proto: tcp
          from_port: 0
          to_port: 65535
          cidr_ip: 0.0.0.0/0
        - proto: icmp
          from_port: -1
          to_port: -1
          cidr_ip: 0.0.0.0/0
        - proto: udp
          from_port: 0
          to_port: 65535
          cidr_ip: 0.0.0.0/0
        - proto: all
          group_name: K8s security group

  - name: Create instances
    ec2:
      region: "{{ region_tag }}"
      key_name: k8s-keypair
      instance_type: t2.xlarge
      image:  "{{ ami }}"
      wait: yes
      group: "K8s security group"
      count: 1
      vpc_subnet_id: "{{ subnet.subnet.id }}"
      instance_tags:
        Name: "{{ name_tag1 }}"
      volumes:
      - device_name: /dev/sda1
        volume_size: 40
      assign_public_ip: yes
    register: ec2
  - name: Add new instances to launched group
    add_host: hostname={{ item.public_ip }} groupname=launched
    with_items: "{{ec2.instances}}"
  - name: Add new instance to master group
    add_host: hostname={{ ec2.instances.0.public_ip }} groupname=master
  - name: Wait for SSH to come up
    wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
    with_items: '{{ec2.instances}}'

  - name: Create instances
    ec2:
      region: "{{ region_tag }}"
      key_name: k8s-keypair
      instance_type: t2.xlarge
      image:  "{{ ami }}"
      wait: yes
      group: "K8s security group"
      count: 1
      vpc_subnet_id: "{{ subnet.subnet.id }}"
      instance_tags:
        Name: "{{ name_tag2 }}"
      volumes:
      - device_name: /dev/sda1
        volume_size: 40
      assign_public_ip: yes
    register: ec2
  - name: Add new instances to launched group
    add_host: hostname={{ item.public_ip }} groupname=launched
    with_items: "{{ec2.instances}}"
  - name: Add new instance to minions group
    add_host: hostname={{ ec2.instances.0.public_ip }} groupname=minions
  - name: Wait for SSH to come up
    wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
    with_items: '{{ec2.instances}}'

- hosts: launched
  remote_user: ubuntu
  become: true
  gather_facts: no
  pre_tasks:
    - name: install python2 because Ubuntu has python 3
      raw: sudo apt-get -y install python-simplejson

  tasks:

    - name: Executing Script to Enable Root Access to Instances
      script: ./enable_root_access.sh

- hosts: launched
  remote_user: root
  become: true
  gather_facts: no

  tasks:

    - name: Add k8s packages key
      apt_key: url=https://packages.cloud.google.com/apt/doc/apt-key.gpg state=present

    - name: Add Kubernetes apt list
      copy: src=./files/kubernetes.list dest=/etc/apt/sources.list.d/kubernetes.list

    - name: Update cache
      apt: update_cache=yes

    - name: Upgrade
      apt: upgrade=dist

    - name: install docker
      script: ./install_docker.sh

    - name: install kubelet
      apt: name=kubelet state=present

    - name: install kubectl
      apt: name=kubectl state=present

    - name: install kubeadm
      apt: name=kubeadm state=present

    - name: install kubernetes-cni
      apt: name=kubernetes-cni state=present

- hosts: master
  remote_user: root
  become: true
  tasks:

    - name: Install Ansible
      script: ./install_ansible.sh

    - name: Executing Scripts to Set Contrail Install Environment
      script: ./set_contrail_install_pkg.sh

- hosts: localhost
  remote_user: root
  become: true
  tasks:

    - name: Executing Scripts to Populate Hosts and Key files
      script: ./get_ip_hosts_file.sh

    - name: Executing Scripts to Copy Keys for Contrail-Ansible
      script: ./copy_keys_ansible.sh

- hosts: master
  remote_user: root
  become: true
  tasks:

    - name: Install Contrail
      command: "cd /root/contrail-ansible/playbooks;  ansible-playbook  -i inventory/my-inventory site.yml"
